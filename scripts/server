#! /usr/bin/env python
"""Script to run infogami server.

USAGE:

* Run Infogami http server at port 8080.

    $ ./scripts/server infogami.yml startserver 8080

* Run Infobase as fastcgi server at port 7070

    $ ./scripts/server infogami.yml startserver fastcgi 8080
"""
import sys
import os, os.path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import yaml

import web
import infogami
from infogami import config
from infogami.infobase import cache, lru, config as infobase_config

def storify(d):
    if isinstance(d, dict):
        return web.storage((k, storify(v)) for k, v in d.items())
    elif isinstance(d, list):
        return [storify(x) for x in d]
    else:
        return d

def setup_infogami():
    # setup python path and load plugins
    sys.path += config.get('python_path', [])

    if config.get('cache_size'):
        cache.global_cache = lru.LRU(config.cache_size)

    d = config.db_parameters
    if d:
        web.config.db_parameters = dict(
            dbn=d.get('engine', 'postgres'),
            host=d.get('host', 'localhost'),
            db=d['database'],
            user=d['username'],
            pw=d.get('password') or ''
        )
        config.db_parameters = web.config.db_parameters
    
    
    if config.get('secret_key'):
        infobase_config.secret_key = config.secret_key

    config.site = config.get('site') or 'infogami.org'

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ['-h', '--help']:
        print >> sys.stderr, "USAGE: %s configfile [subcommand] [arguments]" % (sys.argv[0])
        sys.exit(1)

    config_file = sys.argv[1]
    sys.argv = sys.argv[1:]
    runtime_config = yaml.load(open(config_file))
    for k, v in runtime_config.items():
        setattr(infogami.config, k, storify(v))

    setup_infogami()
    infogami.run()

if __name__ == "__main__":
    main()
