## Creating the database

To get started with infobase, you'll need to create a database for it to store
the underlying data with. infobase is designed to work with PostgreSQL as its
backing database; here are the command-line instructions to create a new Postgres
database called "infobase". (You can can set the `INFOBASE_DB` variable to something 
else if you prefer, but do be sure to set it -- infobase looks at its value to 
figure out which database to query.)

    $ export INFOBASE_DB=infobase
    $ createdb $INFOBASE_DB
    $ createlang plpgsql $INFOBASE_DB
    $ psql infobase < schema.sql
    NOTICE:  CREATE TABLE will create implicit ...
    ...
    $ python __init__.py createsite test.example.com password
    $ python __init__.py
    http://0.0.0.0:8080/

To verify that everything worked, try asking infobase for the contents of `type/type`
in another window:

    $ curl http://0.0.0.0:8080/test.example.com/get?key=/type/type
    {"status": "ok", "result": {"description": ...
    $ curl "http://0.0.0.0:8080/test.example.com/get?key=/type/type&prettyprint=true"
    {
        "status": "ok", 
        "result": {
            "description": "Metatype.\nThis is the type of all types including it self.", 
            "name": "Type", 
            ...
        }
    }

## Connecting to the server from Python

The previous command we ran started the infobase server on port 8080, now
we need to connect to it from Python.

    $ python
    Python 2.5 (r25:51908, Jan 25 2007, 08:50:45) 
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import client
    >>> c = client.Client('0.0.0.0:8080', 'test.example.com')
    >>> s = client.Site(c)
    >>> t = s.get('/type/type')
    >>> t
    <Thing: '/type/type'>
    >>> t.description
    u'Metatype.\nThis is the type of all types including it self.'

OK, looks like it's working. Let's get started by creating a new object.
Each object in the infobase has a `key`, which is kind of like its URL.
Let's create a new object with the key `/tmp/example`:

    >>> t = s.new('/tmp/example')
    >>> t
    <Thing: '/tmp/example'>
    >>> t.title = 'An Example'
    >>> t.type = s.get('/type/type')    
    >>> t.save('you can put a change description here')
    'created'

